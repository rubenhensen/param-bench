  In a dirty state. Trying to read sac2crc from /home/rhensen/orig/sac2c/build_p/sac2crc_p.
  MT_MODE = 0 in target, forcing -numthreads to 1.
   
**  1: Loading SAC program ...
  **** Locating source code ...
  Reading from file "./12-param.sac" ...
  **** Running C preprocessor ...
  **** Parsing input file ...
  **** Hiding struct definitions behind typedefs and accessors ...
   
**  2: Preprocessing type patterns ...
  **** Analysing type patterns and converting to built-in types ...
  **** Moving type pattern constraints to pre- or post-conditions ...
  **** Turning type patterns of functions into code ...
  **** Turning type patterns of externals into code ...
  **** Cleanup type pattern information ...
   
**  3: Preprocessing SAC program ...
  **** Inferring Ranges for Set Expressions ...
  **** Identifying Multi-Return Set Notations ...
  **** Handling dots in Set Notation ...
  **** Translating Set Notation into With-Loops ...
  **** Rename safe SPap to skip checks generated by type patterns ...
  **** Handling dots in selections ...
  **** Handling zero-generator with-loops ...
  **** Handling multi-generator with-loops ...
  **** Handling multi-operator with-loops ...
  **** Handling dots in with-loop generators ...
  **** Resolving pragma annotations ...
  **** Generating object initializers ...
  **** Checking and simplifying generic definitions ...
   
**  4: Running module system ...
  **** Processing use and import statements ...
  **** Annotating namespaces ...
  **** Gathering dependencies ...
  **** Retrieving imported symbols ...
  **** Retrieving used symbols ...
  **** Loading prelude functions ...
   
**  5: Simplifying source code ...
  **** Transforming while-loops into do-loops ...
  **** Eliminating conditional expressions ...
  **** Handling multiple operator expressions ...
  **** Flattening nested expressions ...
  **** Processing user defined types ...
  **** Generating generic type conversion functions ...
   
**  6: Converting to static single assignment form ...
  **** Inserting variable declarations ...
  **** Converting type decls into type conversions ...
  **** Creating wrapper functions ...
  **** Running global object analysis ...
  **** Generating global object initialiser ...
  **** Resolving global objects ...
  **** Resolving reference parameters ...
  **** Extending dispatch information ...
  **** Eliminating loops and conditionals ...
  **** Establishing static single assignment form ...
   
**  7: Running type inference system ...
  **** Enforcing Specializations ...
  **** Running type inference system ...
  **** Eliminating Type Variables ...
  **** Eliminating Bottom Types ...
  **** Splitting Wrappers ...
slurmstepd: error: *** JOB 6476171 ON cn132 CANCELLED AT 2025-09-02T13:00:33 ***
